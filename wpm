#!/usr/bin/env python3

import sys
import tty
import termios
import time
import contextlib
import random
import os
from fuzzywuzzy import fuzz

N_WORDS = 10

CTRL_C = chr(3)
CTRL_H = chr(8)
ESCAPE = chr(27)
RETURN = [chr(10), chr(13)]
BACKSPACE = [CTRL_H, "\x7f"]
VALID_KEYS = {
    "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
    "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
    "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
    "-", "_", "'", '"', ";", ":", ".", ",", "?", " "
}

class TerminalManager:
    def __init__(self):
        self.orig_termios = termios.tcgetattr(
            sys.stdin.fileno()
        )

    @contextlib.contextmanager
    def raw_mode(self):
        tty.setraw(sys.stdin.fileno())
        try:
            yield
        finally:
            self.restore_settings()

    def restore_settings(self):
        termios.tcsetattr(
            sys.stdin.fileno(),
            termios.TCSADRAIN,
            self.orig_termios
        )
        print("\x1b[0m", end="")

    def getch(self):
        return sys.stdin.read(1)

    def print_raw(self, ch):
        print(ch, end="", flush=True)

terminal = TerminalManager()

def read_words(word_file, target_chars=70):
    with open(word_file, "r") as f:
        all_words = f.read().split("\n")
        all_words.pop()
    words = []
    length = 0
    while length < target_chars - 1:
        word = random.choice(all_words)
        new_length = length + len(word)
        if new_length == target_chars:
            length = new_length
        elif new_length > target_chars - 4:
            continue
        else:
            length = new_length + 1 
        words.append(word)
    return words

class Stats:
    accuracy = 0.0
    cpm = 0
    wpm = 0
    chars = 0
    words = 0

    def __init__(self, prompt_str, input_str, duration):
        self.accuracy = fuzz.ratio(prompt_str, input_str) / 100
        self.chars = len(input_str)
        self.words = sum(1 if word else 0 for word in input_str.split(" "))
        self.cpm = self.chars / duration * 60
        self.wpm = (self.cpm / 5) * self.accuracy ** 2

class GameManager:
    def __init__(self):
        self.input = ""
        self.prompt = ""
        self.playing = True
        self.start_time = 0
        self.end_time = 0

    def start(self):
        self.words = read_words(
            os.getenv("HOME") + "/.config/jwpm/words.txt",
            target_chars=70)
        self.prompt = " ".join(self.words)
        print(self.prompt)

        with terminal.raw_mode():
            self.mainloop()
            self.end_time = time.time()

        duration = self.end_time - self.start_time
        self.print_score(duration)

    def mainloop(self):
        terminal.print_raw("\r")
        while self.playing:
            ch = terminal.getch()
            if not self.start_time:
                self.start_time = time.time()
            self.handle_input(ch)

    def handle_input(self, ch):
        if ch == CTRL_C or ch in RETURN:
            self.playing = False
        elif ch in BACKSPACE:
            if self.input:
                terminal.print_raw("\b \b")
                self.input = self.input[:-1]
        elif ch in VALID_KEYS:
            self.input += ch
            terminal.print_raw(ch)

    def print_score(self, duration):
        stats = Stats(self.prompt, self.input, duration)
        if (self.input):
            print()
        fmt_str = \
            "%d word%s (%d char%s) in %.2f seconds with %d%% accuracy = %d WPM"
        fmt_args = (
            stats.words,
            "" if stats.words == 1 else "s",
            stats.chars,
            "" if stats.chars == 1 else "s",
            duration,
            int(stats.accuracy * 100),
            round(stats.wpm)
        )
        print(fmt_str % fmt_args)

if __name__ == "__main__":
    game = GameManager()
    game.start()
