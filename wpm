#!/usr/bin/env python3

import sys
import tty
import termios
import time
import contextlib
import random
import os

N_WORDS = 10

CTRL_C = chr(3)
CTRL_H = chr(8)
ESCAPE = chr(27)
RETURN = [chr(10), chr(13)]
BACKSPACE = [CTRL_H, "\x7f"]
VALID_KEYS = {
    "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
    "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
    "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
    "-", "_", "'", '"', ";", ":", ".", ",", "?", " "
}


class Color:
    RED = 31

class TerminalManager:
    def __init__(self):
        self.orig_termios = termios.tcgetattr(
            sys.stdin.fileno()
        )
        self.style = set()


    @contextlib.contextmanager
    def raw_mode(self):
        tty.setraw(sys.stdin.fileno())
        try:
            yield
        finally:
            self.restore_settings()

    def restore_settings(self):
        termios.tcsetattr(
            sys.stdin.fileno(),
            termios.TCSADRAIN,
            self.orig_termios
        )
        print("\x1b[0m", end="")

    def getch(self):
        return sys.stdin.read(1)

    def print_raw(self, ch):
        print(ch, end="", flush=True)

    def set_color(self, color):
        if color not in self.style:
            self.style.add(color)
            return "\x1b[%dm" % color
        return ""

    def reset_style(self):
        if self.style:
            self.style.clear()
            return "\x1b[0m"
        return ""

terminal = TerminalManager()

def read_words(word_file, target_chars=70):
    with open(word_file, "r") as f:
        all_words = f.read().split("\n")
        all_words.pop()
    words = []
    length = 0
    while length < target_chars - 1:
        word = random.choice(all_words)
        new_length = length + len(word)
        if new_length == target_chars:
            length = new_length
        elif new_length > target_chars - 4:
            continue
        else:
            length = new_length + 1 
        words.append(word)
    return words
   
def get_accuracy(self, string):
    total = len(self.word_string)
    correct = 0
    for i, char in enumerate(string):
        if i >= len(self.word_string):
            total += 1
        elif self.word_string[i] == char:
            correct += 1
    return correct / total

class Stats:
    accuracy = 0
    cpm = 0
    wpm = 0
    chars = 0

def get_stats(words, input_words, duration):
    orig_chars = sum(len(w) for w in words) + len(words) - 1
    chars = sum(len(w) for w in input_words) + len(input_words) - 1
    correct = len(input_words) - 1
    for word, input_word in zip(words, input_words):
        correct += sum(a == b for a, b in zip(word, input_word))
    stats = Stats()
    stats.accuracy = correct / max(chars, orig_chars)
    stats.cpm = chars / duration * 60
    stats.wpm = (stats.cpm / 5) * stats.accuracy
    stats.chars = chars
    return stats


class GameManager:
    def __init__(self):
        self.words = []
        self.input_words = [""]
        self.playing = True
        self.start_time = 0
        self.end_time = 0

    def start(self):
        self.words = read_words(os.getenv("HOME") + "/.config/jwpm/words.txt")
        print(" ".join(self.words))

        with terminal.raw_mode():
            self.mainloop()
            self.end_time = time.time()

        duration = self.end_time - self.start_time
        self.print_score(duration)

    def mainloop(self):
        terminal.print_raw("\r")
        while self.playing:
            ch = terminal.getch()
            if not self.start_time:
                self.start_time = time.time()
            self.handle_input(ch)
            # self.print_input()

    def letter_match(self):
        if len(self.input_words) > len(self.words):
            return False
        current_word = self.input_words[-1]
        correct_word = self.words[len(self.input_words) - 1]
        if len(current_word) > len(correct_word):
            return False
        return correct_word[len(current_word) - 1] == current_word[-1]

    def handle_input(self, ch):
        if ch == CTRL_C or ch in RETURN:
            self.playing = False
        elif ch in BACKSPACE:
            terminal.print_raw("\b \b")
            if self.input_words[-1]:
                self.input_words[-1] = self.input_words[-1][:-1]
            elif len(self.input_words) > 1:
                self.input_words.pop()
        elif ch == " ":
            if self.input_words[-1]:
                self.input_words.append("")
            terminal.print_raw(ch)
        elif ch in VALID_KEYS:
            self.input_words[-1] += ch
            terminal.print_raw(terminal.reset_style()
                    if self.letter_match() else terminal.set_color(Color.RED))
            terminal.print_raw(ch)

    def print_score(self, duration):
        print(terminal.reset_style())
        if (self.input_words[-1]):
            print()
        stats = get_stats(self.words, self.input_words, duration)
        print("%d words (%d chars) in %.2f seconds with %d%% accuracy = %d WPM" % (
            len(self.input_words),
            stats.chars,
            duration,
            int(stats.accuracy * 100),
            round(stats.wpm)
        ))

if __name__ == "__main__":
    game = GameManager()
    game.start()
